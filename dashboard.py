import pandas as pd
import dash
from dash import dcc, html, dash_table
import plotly.express as px

# === 1. –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ CSV (—ç–∫—Å–ø–æ—Ä—Ç –∏–∑ Google Sheets) ===
df = pd.read_csv("data.csv")
# –ü–µ—á–∞—Ç–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–ª–æ–Ω–æ–∫
#print("–ö–æ–ª–æ–Ω–∫–∏ –≤ —Ñ–∞–π–ª–µ:")
#print(df.columns.tolist())

# –ü–µ—á–∞—Ç–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫
#print("\n–ü–µ—Ä–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã:")
#print(df.head())
# –ü—Ä–æ–≤–µ—Ä–∏–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫ (–ø–µ—Ä–µ–∏–º–µ–Ω—É–π—Ç–µ –ø–æ–¥ –≤–∞—à–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –≤ —Ñ–∞–π–ª–µ)
# –ù–∞–ø—Ä–∏–º–µ—Ä: Source, Spend, Clicks, Leads, Sales, Revenue

# === 2. –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω—É–∂–Ω—ã–º –∫–æ–ª–æ–Ω–∫–∞–º ===

rename_map = {
"traffic_source": "Source",
"costs": "Spend",
"clicks": "Clicks",
"leads": "Leads",
"orders": "Sales",
"revenue": "Revenue"
}

df = df.rename(columns=rename_map)

# === 2. –°—á–∏—Ç–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ ===
df_summary = df.groupby("Source", as_index=False).sum()

# –î–æ–±–∞–≤–ª—è–µ–º –≤—ã—á–∏—Å–ª—è–µ–º—ã–µ –ø–æ–ª—è
if "Leads" in df_summary.columns:
    df_summary["CPL"] = df_summary.apply(lambda x: x["Spend"] / x["Leads"] if x["Leads"] > 0 else None, axis=1)
if "Sales" in df_summary.columns:
    df_summary["CPO"] = df_summary.apply(lambda x: x["Spend"] / x["Sales"] if x["Sales"] > 0 else None, axis=1)
if "Revenue" in df_summary.columns:
    df_summary["ROAS"] = df_summary.apply(lambda x: x["Revenue"] / x["Spend"] if x["Spend"] > 0 else None, axis=1)

# –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
cols_show = ["Source", "Spend", "Clicks", "Leads", "Sales", "Revenue", "CPL", "CPO", "ROAS"]
df_summary = df_summary[[c for c in cols_show if c in df_summary.columns]]
# === 3. –°–æ–∑–¥–∞—ë–º –¥–∞—à–±–æ—Ä–¥ ===
app = dash.Dash(__name__)

app.layout = html.Div([
    html.H1("üìä –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–π –¥–∞—à–±–æ—Ä–¥", style={"textAlign": "center"}),

    # –¢–∞–±–ª–∏—Ü–∞ —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏
    dash_table.DataTable(
        columns=[{"name": i, "id": i} for i in df_summary.columns],
        data=df_summary.round(2).to_dict("records"),
        style_table={"overflowX": "auto"},
        style_cell={"textAlign": "center", "padding": "5px"},
        style_header={"backgroundColor": "#f4f4f4", "fontWeight": "bold"}
    ),

    html.Br(),

    # –ì—Ä–∞—Ñ–∏–∫ —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
    dcc.Graph(
        figure=px.bar(df_summary, x="Source", y="Spend", title="–†–∞—Å—Ö–æ–¥—ã –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º", text_auto=True)
    ),

    # –ì—Ä–∞—Ñ–∏–∫ –∑–∞—è–≤–æ–∫ –∏ –ø—Ä–æ–¥–∞–∂ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    dcc.Graph(
        figure=px.bar(df_summary, x="Source", y=[col for col in ["Leads", "Sales"] if col in df_summary.columns],
                      barmode="group", title="–ó–∞—è–≤–∫–∏ –∏ –ø—Ä–æ–¥–∞–∂–∏")
    ),

    # ROAS
    dcc.Graph(
        figure=px.bar(df_summary, x="Source", y="ROAS", title="ROAS –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º", text_auto=True)
    ) if "ROAS" in df_summary.columns else html.Div()
])

if __name__ == "__main__":
    app.run(debug=True)
